import React, { useState, useEffect } from 'react';
import { Card, Row, Col, Statistic, Table, Tag, DatePicker } from 'antd';
import { LineChart, Line, PieChart, Pie, Cell, BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';
import { scanApi } from '../services/api';

const { RangePicker } = DatePicker;

const VulnerabilityTypePage = ({ vulnType, title, description }) => {
  const [loading, setLoading] = useState(true);
  const [data, setData] = useState({
    total: 0,
    byRisk: { high: 0, medium: 0, low: 0 },
    byTime: [],
    affectedUrls: [],
    recentFindings: []
  });
  const [dateRange, setDateRange] = useState([null, null]);

  useEffect(() => {
    fetchData();
  }, [vulnType, dateRange]);

  const fetchData = async () => {
    try {
      // 获取所有任务
      const tasks = await scanApi.getAllTasks();
      
      // 获取所有任务的漏洞结果
      const resultsPromises = tasks.map(task => scanApi.getResults(task.id));
      const allResults = await Promise.all(resultsPromises);
      
      // 过滤指定类型的漏洞
      const typeVulns = allResults.flat().filter(vuln => 
        vuln.vulnerability_type === vulnType &&
        (!dateRange[0] || new Date(vuln.discovered_at) >= dateRange[0]) &&
        (!dateRange[1] || new Date(vuln.discovered_at) <= dateRange[1])
      );

      // 按风险等级统计
      const byRisk = typeVulns.reduce((acc, vuln) => {
        acc[vuln.severity] = (acc[vuln.severity] || 0) + 1;
        return acc;
      }, {});

      // 按时间统计
      const byTime = typeVulns.reduce((acc, vuln) => {
        const date = vuln.discovered_at.split('T')[0];
        const existing = acc.find(item => item.date === date);
        if (existing) {
          existing.count += 1;
        } else {
          acc.push({ date, count: 1 });
        }
        return acc;
      }, []).sort((a, b) => new Date(a.date) - new Date(b.date));

      // 统计受影响的URL
      const affectedUrls = Array.from(new Set(typeVulns.map(v => v.affected_url)))
        .map(url => ({
          url,
          count: typeVulns.filter(v => v.affected_url === url).length
        }))
        .sort((a, b) => b.count - a.count);

      setData({
        total: typeVulns.length,
        byRisk,
        byTime,
        affectedUrls,
        recentFindings: typeVulns.slice(-5).reverse()
      });
    } catch (error) {
      console.error('获取漏洞数据失败:', error);
    } finally {
      setLoading(false);
    }
  };

  const riskData = [
    { name: '高危', value: data.byRisk.high || 0, color: '#ff4d4f' },
    { name: '中危', value: data.byRisk.medium || 0, color: '#faad14' },
    { name: '低危', value: data.byRisk.low || 0, color: '#52c41a' },
  ];

  const columns = [
    {
      title: '发现时间',
      dataIndex: 'discovered_at',
      key: 'discovered_at',
      render: (time) => new Date(time).toLocaleString(),
    },
    {
      title: '风险等级',
      dataIndex: 'severity',
      key: 'severity',
      render: (severity) => {
        const colorMap = {
          high: 'red',
          medium: 'orange',
          low: 'green'
        };
        return (
          <Tag color={colorMap[severity]}>
            {severity === 'high' ? '高危' : severity === 'medium' ? '中危' : '低危'}
          </Tag>
        );
      },
    },
    {
      title: '影响URL',
      dataIndex: 'affected_url',
      key: 'affected_url',
    },
    {
      title: '描述',
      dataIndex: 'description',
      key: 'description',
    },
  ];

  return (
    <div style={{ padding: '24px' }}>
      <Card title={title} style={{ marginBottom: '16px' }}>
        <p>{description}</p>
        <RangePicker 
          onChange={(dates) => setDateRange(dates)}
          style={{ marginTop: '16px' }}
        />
      </Card>

      <Row gutter={[16, 16]}>
        <Col span={8}>
          <Card>
            <Statistic
              title="总发现数量"
              value={data.total}
              loading={loading}
            />
          </Card>
        </Col>
        <Col span={8}>
          <Card>
            <Statistic
              title="受影响URL数"
              value={data.affectedUrls.length}
              loading={loading}
            />
          </Card>
        </Col>
        <Col span={8}>
          <Card>
            <Statistic
              title="高危漏洞数"
              value={data.byRisk.high || 0}
              valueStyle={{ color: '#ff4d4f' }}
              loading={loading}
            />
          </Card>
        </Col>
      </Row>

      <Row gutter={[16, 16]} style={{ marginTop: '16px' }}>
        <Col span={12}>
          <Card title="风险等级分布">
            <ResponsiveContainer width="100%" height={300}>
              <PieChart>
                <Pie
                  data={riskData}
                  dataKey="value"
                  nameKey="name"
                  cx="50%"
                  cy="50%"
                  outerRadius={80}
                >
                  {riskData.map((entry, index) => (
                    <Cell key={`cell-${index}`} fill={entry.color} />
                  ))}
                </Pie>
                <Tooltip />
                <Legend />
              </PieChart>
            </ResponsiveContainer>
          </Card>
        </Col>
        <Col span={12}>
          <Card title="发现趋势">
            <ResponsiveContainer width="100%" height={300}>
              <LineChart data={data.byTime}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="date" />
                <YAxis />
                <Tooltip />
                <Line type="monotone" dataKey="count" stroke="#8884d8" name="发现数量" />
              </LineChart>
            </ResponsiveContainer>
          </Card>
        </Col>
      </Row>

      <Row gutter={[16, 16]} style={{ marginTop: '16px' }}>
        <Col span={12}>
          <Card title="受影响URL TOP10">
            <ResponsiveContainer width="100%" height={300}>
              <BarChart data={data.affectedUrls.slice(0, 10)}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="url" />
                <YAxis />
                <Tooltip />
                <Bar dataKey="count" fill="#8884d8" name="漏洞数量" />
              </BarChart>
            </ResponsiveContainer>
          </Card>
        </Col>
        <Col span={12}>
          <Card title="最近发现">
            <Table
              columns={columns}
              dataSource={data.recentFindings}
              rowKey="id"
              loading={loading}
              pagination={false}
            />
          </Card>
        </Col>
      </Row>
    </div>
  );
};

export default VulnerabilityTypePage; 